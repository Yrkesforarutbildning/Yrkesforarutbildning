@model Yrkesforarutbildning.Models.OfferModel

<main>
    <section class="offer-section">
        <div class="offer-container">
            <h2>Begär Offert</h2>
            
            <form class="offer-form" asp-controller="Product" asp-action="Offer" method="post">

                <div class="form-group">
                    <label asp-for="@Model.SelectedService"> <p>Vald tjänst</p> </label>
                    <input type="text" asp-for="SelectedService" readonly>
                </div>
                

                <div class="form-group name-group">
                    <div class="name-field">
                        <label asp-for="@Model.FirstName"> <p>Förnamn</p> </label>
                        <input asp-for="@Model.FirstName" type="text" placeholder="Ange ditt förnamn">
                        <span asp-validation-for="@Model.FirstName" class="text-danger"></span>
                    </div>
                    <div class="name-field">
                        <label asp-for="@Model.LastName"> <p>Efternamn</p> </label>
                        <input asp-for="@Model.LastName" type="text" placeholder="Ange ditt efternamn">
                        <span asp-validation-for="@Model.LastName" class="text-danger"></span>
                    </div>
                </div>


                <div class="form-group">
                    <label asp-for="@Model.OrgNumber"> <p>Organisationsnummer / Personnummer</p> </label>
                    <input asp-for="@Model.OrgNumber" type="text" placeholder="Ange organisationsnummer eller personnummer">
                    <span asp-validation-for="@Model.OrgNumber" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="@Model.Address"> <p>Adress för utbildning</p> </label>
                    <input asp-for="@Model.Address" type="text" placeholder="Ange adress där utbildningen ska hållas">
                    <span asp-validation-for="@Model.Address" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="@Model.ChooseDate"> <p>Datum för utbildning</p> </label>
                    <input asp-for="@Model.ChooseDate" type="date" id="datePicker" placeholder="Ange datum" min="">
                    <span asp-validation-for="@Model.ChooseDate" class=""></span>
                </div>

                <div class="form-group">
                    <label asp-for="@Model.Email"> <p>E-postadress</p> </label>
                    <input asp-for="@Model.Email" placeholder="Ange din e-postadress">
                    <span asp-validation-for="@Model.Email" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="@Model.PhoneNumber"> <p>Telefonnummer</p> </label>
                    <input asp-for="@Model.PhoneNumber" type="tel" placeholder="Ange ditt telefonnummer">
                    <span asp-validation-for="@Model.PhoneNumber" class="text-danger"></span>
                </div>

                <div asp-validation-summary="All" class="text-danger"></div>

                <button type="submit" class="submit-button">Skicka förfrågan</button>
            </form>
        </div>
    </section>
</main>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const datePicker = document.getElementById("datePicker");

        // Funktion för att kontrollera om datumet är en helg (lördag eller söndag)
        function isWeekend(date) {
            const day = date.getDay();
            return day === 0 || day === 6; // 0 = söndag, 6 = lördag
        }

        // Funktion för att uppdatera minsta möjliga datum (inte helgdag eller 2 dagar innan)
        function updateMinDate() {
            let now = new Date();
            now.setDate(now.getDate() + 2); // Sätt minsta datum till 2 dagar framåt

            // Hoppa över helger
            while (isWeekend(now)) {
                now.setDate(now.getDate() + 1);
            }

            let minDate = now.toISOString().split("T")[0];
            datePicker.setAttribute("min", minDate); // Sätt minsta till 2 dagar framåt
        }

        // Förhindra att användaren kan välja helgdagar eller datum mindre än 2 dagar framåt
        function preventInvalidSelection(e) {
            const selectedDate = new Date(e.target.value);
            const today = new Date();
            today.setDate(today.getDate() + 2); // Två dagar framåt från idag

            if (isWeekend(selectedDate) || selectedDate < today) {
                alert("Du kan inte boka en helgdag (lördag eller söndag) eller ett datum som är 24 timmar för nära i tiden. Vänligen välj ett giltigt datum.");
                e.target.value = ""; // Rensa det felaktiga datumet
            }
        }

        updateMinDate();
        datePicker.addEventListener("change", preventInvalidSelection);
    });
</script>
